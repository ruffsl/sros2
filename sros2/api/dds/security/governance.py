#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated  by generateDS.py.
# Python 3.5.2 (default, Nov 17 2016, 17:05:23)  [GCC 5.4.0 20160609]
#
# Command line options:
#   ('-f', '')
#   ('--no-dates', '')
#   ('--no-versions', '')
#   ('--super', 'sros2.api.dds.security.governance')
#   ('-o', 'sros2/sros2/api/dds/security/governance.py')
#   ('-s', 'sros2/sros2/api/dds/security/governance_sub.py')
#
# Command line arguments:
#   sros2/sros2/resources/dds/security/governance.xsd
#
# Command line:
#   /usr/local/bin/generateDS -f --no-dates --no-versions -o "sros2/sros2/api/dds/security/governance.py" -s "sros2/sros2/api/dds/security/governance_sub.py" sros2/sros2/resources/dds/security/governance.xsd
#
# Current working directory (os.getcwd()):
#   security
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:

    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)

    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'utf-8'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class DomainAccessRulesNode(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, domain_access_rules=None):
        self.original_tagname_ = None
        self.domain_access_rules = domain_access_rules
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DomainAccessRulesNode)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DomainAccessRulesNode.subclass:
            return DomainAccessRulesNode.subclass(*args_, **kwargs_)
        else:
            return DomainAccessRulesNode(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_domain_access_rules(self): return self.domain_access_rules
    def set_domain_access_rules(self, domain_access_rules): self.domain_access_rules = domain_access_rules
    def hasContent_(self):
        if (
            self.domain_access_rules is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DomainAccessRulesNode', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DomainAccessRulesNode')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DomainAccessRulesNode')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DomainAccessRulesNode', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DomainAccessRulesNode'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DomainAccessRulesNode', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.domain_access_rules is not None:
            self.domain_access_rules.export(outfile, level, namespace_, name_='domain_access_rules', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'domain_access_rules':
            obj_ = DomainAccessRules.factory()
            obj_.build(child_)
            self.domain_access_rules = obj_
            obj_.original_tagname_ = 'domain_access_rules'
# end class DomainAccessRulesNode


class DomainAccessRules(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, domain_rule=None):
        self.original_tagname_ = None
        if domain_rule is None:
            self.domain_rule = []
        else:
            self.domain_rule = domain_rule
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DomainAccessRules)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DomainAccessRules.subclass:
            return DomainAccessRules.subclass(*args_, **kwargs_)
        else:
            return DomainAccessRules(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_domain_rule(self): return self.domain_rule
    def set_domain_rule(self, domain_rule): self.domain_rule = domain_rule
    def add_domain_rule(self, value): self.domain_rule.append(value)
    def insert_domain_rule_at(self, index, value): self.domain_rule.insert(index, value)
    def replace_domain_rule_at(self, index, value): self.domain_rule[index] = value
    def hasContent_(self):
        if (
            self.domain_rule
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DomainAccessRules', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DomainAccessRules')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DomainAccessRules')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DomainAccessRules', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DomainAccessRules'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DomainAccessRules', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for domain_rule_ in self.domain_rule:
            domain_rule_.export(outfile, level, namespace_, name_='domain_rule', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'domain_rule':
            obj_ = DomainRule.factory()
            obj_.build(child_)
            self.domain_rule.append(obj_)
            obj_.original_tagname_ = 'domain_rule'
# end class DomainAccessRules


class DomainRule(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, domains=None, allow_unauthenticated_participants=None, enable_join_access_control=None, discovery_protection_kind=None, liveliness_protection_kind=None, rtps_protection_kind=None, topic_access_rules=None):
        self.original_tagname_ = None
        self.domains = domains
        self.allow_unauthenticated_participants = allow_unauthenticated_participants
        self.enable_join_access_control = enable_join_access_control
        self.discovery_protection_kind = discovery_protection_kind
        self.validate_ProtectionKind(self.discovery_protection_kind)
        self.liveliness_protection_kind = liveliness_protection_kind
        self.validate_ProtectionKind(self.liveliness_protection_kind)
        self.rtps_protection_kind = rtps_protection_kind
        self.validate_ProtectionKind(self.rtps_protection_kind)
        self.topic_access_rules = topic_access_rules
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DomainRule)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DomainRule.subclass:
            return DomainRule.subclass(*args_, **kwargs_)
        else:
            return DomainRule(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_domains(self): return self.domains
    def set_domains(self, domains): self.domains = domains
    def get_allow_unauthenticated_participants(self): return self.allow_unauthenticated_participants
    def set_allow_unauthenticated_participants(self, allow_unauthenticated_participants): self.allow_unauthenticated_participants = allow_unauthenticated_participants
    def get_enable_join_access_control(self): return self.enable_join_access_control
    def set_enable_join_access_control(self, enable_join_access_control): self.enable_join_access_control = enable_join_access_control
    def get_discovery_protection_kind(self): return self.discovery_protection_kind
    def set_discovery_protection_kind(self, discovery_protection_kind): self.discovery_protection_kind = discovery_protection_kind
    def get_liveliness_protection_kind(self): return self.liveliness_protection_kind
    def set_liveliness_protection_kind(self, liveliness_protection_kind): self.liveliness_protection_kind = liveliness_protection_kind
    def get_rtps_protection_kind(self): return self.rtps_protection_kind
    def set_rtps_protection_kind(self, rtps_protection_kind): self.rtps_protection_kind = rtps_protection_kind
    def get_topic_access_rules(self): return self.topic_access_rules
    def set_topic_access_rules(self, topic_access_rules): self.topic_access_rules = topic_access_rules
    def validate_ProtectionKind(self, value):
        # Validate type ProtectionKind, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ENCRYPT', 'SIGN', 'NONE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ProtectionKind' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.domains is not None or
            self.allow_unauthenticated_participants is not None or
            self.enable_join_access_control is not None or
            self.discovery_protection_kind is not None or
            self.liveliness_protection_kind is not None or
            self.rtps_protection_kind is not None or
            self.topic_access_rules is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DomainRule', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DomainRule')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DomainRule')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DomainRule', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DomainRule'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DomainRule', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.domains is not None:
            self.domains.export(outfile, level, namespace_, name_='domains', pretty_print=pretty_print)
        if self.allow_unauthenticated_participants is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sallow_unauthenticated_participants>%s</%sallow_unauthenticated_participants>%s' % (namespace_, self.gds_format_boolean(self.allow_unauthenticated_participants, input_name='allow_unauthenticated_participants'), namespace_, eol_))
        if self.enable_join_access_control is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%senable_join_access_control>%s</%senable_join_access_control>%s' % (namespace_, self.gds_format_boolean(self.enable_join_access_control, input_name='enable_join_access_control'), namespace_, eol_))
        if self.discovery_protection_kind is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdiscovery_protection_kind>%s</%sdiscovery_protection_kind>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.discovery_protection_kind), input_name='discovery_protection_kind')), namespace_, eol_))
        if self.liveliness_protection_kind is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sliveliness_protection_kind>%s</%sliveliness_protection_kind>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.liveliness_protection_kind), input_name='liveliness_protection_kind')), namespace_, eol_))
        if self.rtps_protection_kind is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%srtps_protection_kind>%s</%srtps_protection_kind>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.rtps_protection_kind), input_name='rtps_protection_kind')), namespace_, eol_))
        if self.topic_access_rules is not None:
            self.topic_access_rules.export(outfile, level, namespace_, name_='topic_access_rules', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'domains':
            obj_ = DomainIdSet.factory()
            obj_.build(child_)
            self.domains = obj_
            obj_.original_tagname_ = 'domains'
        elif nodeName_ == 'allow_unauthenticated_participants':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'allow_unauthenticated_participants')
            self.allow_unauthenticated_participants = ival_
        elif nodeName_ == 'enable_join_access_control':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'enable_join_access_control')
            self.enable_join_access_control = ival_
        elif nodeName_ == 'discovery_protection_kind':
            discovery_protection_kind_ = child_.text
            discovery_protection_kind_ = self.gds_validate_string(discovery_protection_kind_, node, 'discovery_protection_kind')
            self.discovery_protection_kind = discovery_protection_kind_
            # validate type ProtectionKind
            self.validate_ProtectionKind(self.discovery_protection_kind)
        elif nodeName_ == 'liveliness_protection_kind':
            liveliness_protection_kind_ = child_.text
            liveliness_protection_kind_ = self.gds_validate_string(liveliness_protection_kind_, node, 'liveliness_protection_kind')
            self.liveliness_protection_kind = liveliness_protection_kind_
            # validate type ProtectionKind
            self.validate_ProtectionKind(self.liveliness_protection_kind)
        elif nodeName_ == 'rtps_protection_kind':
            rtps_protection_kind_ = child_.text
            rtps_protection_kind_ = self.gds_validate_string(rtps_protection_kind_, node, 'rtps_protection_kind')
            self.rtps_protection_kind = rtps_protection_kind_
            # validate type ProtectionKind
            self.validate_ProtectionKind(self.rtps_protection_kind)
        elif nodeName_ == 'topic_access_rules':
            obj_ = TopicAccessRules.factory()
            obj_.build(child_)
            self.topic_access_rules = obj_
            obj_.original_tagname_ = 'topic_access_rules'
# end class DomainRule


class DomainIdSet(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, id=None, id_range=None):
        self.original_tagname_ = None
        if id is None:
            self.id = []
        else:
            self.id = id
        if id_range is None:
            self.id_range = []
        else:
            self.id_range = id_range
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DomainIdSet)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DomainIdSet.subclass:
            return DomainIdSet.subclass(*args_, **kwargs_)
        else:
            return DomainIdSet(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_id(self): return self.id
    def set_id(self, id): self.id = id
    def add_id(self, value): self.id.append(value)
    def insert_id_at(self, index, value): self.id.insert(index, value)
    def replace_id_at(self, index, value): self.id[index] = value
    def get_id_range(self): return self.id_range
    def set_id_range(self, id_range): self.id_range = id_range
    def add_id_range(self, value): self.id_range.append(value)
    def insert_id_range_at(self, index, value): self.id_range.insert(index, value)
    def replace_id_range_at(self, index, value): self.id_range[index] = value
    def validate_DomainId(self, value):
        # Validate type DomainId, a restriction on xs:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.id or
            self.id_range
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DomainIdSet', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DomainIdSet')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DomainIdSet')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DomainIdSet', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DomainIdSet'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DomainIdSet', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for id_ in self.id:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sid>%s</%sid>%s' % (namespace_, self.gds_format_integer(id_, input_name='id'), namespace_, eol_))
        for id_range_ in self.id_range:
            id_range_.export(outfile, level, namespace_, name_='id_range', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'id':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'id')
            self.id.append(ival_)
            # validate type DomainId
            self.validate_DomainId(self.id[-1])
        elif nodeName_ == 'id_range':
            obj_ = DomainIdRange.factory()
            obj_.build(child_)
            self.id_range.append(obj_)
            obj_.original_tagname_ = 'id_range'
# end class DomainIdSet


class DomainIdRange(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, min=None, max=None):
        self.original_tagname_ = None
        self.min = min
        self.validate_DomainId(self.min)
        self.max = max
        self.validate_DomainId(self.max)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, DomainIdRange)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if DomainIdRange.subclass:
            return DomainIdRange.subclass(*args_, **kwargs_)
        else:
            return DomainIdRange(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_min(self): return self.min
    def set_min(self, min): self.min = min
    def get_max(self): return self.max
    def set_max(self, max): self.max = max
    def validate_DomainId(self, value):
        # Validate type DomainId, a restriction on xs:nonNegativeInteger.
        if value is not None and Validate_simpletypes_:
            pass
    def hasContent_(self):
        if (
            self.min is not None or
            self.max is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='DomainIdRange', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('DomainIdRange')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='DomainIdRange')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='DomainIdRange', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='DomainIdRange'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='DomainIdRange', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.min is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smin>%s</%smin>%s' % (namespace_, self.gds_format_integer(self.min, input_name='min'), namespace_, eol_))
        if self.max is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smax>%s</%smax>%s' % (namespace_, self.gds_format_integer(self.max, input_name='max'), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'min':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'min')
            self.min = ival_
            # validate type DomainId
            self.validate_DomainId(self.min)
        elif nodeName_ == 'max':
            sval_ = child_.text
            try:
                ival_ = int(sval_)
            except (TypeError, ValueError) as exp:
                raise_parse_error(child_, 'requires integer: %s' % exp)
            if ival_ < 0:
                raise_parse_error(child_, 'requires nonNegativeInteger')
            ival_ = self.gds_validate_integer(ival_, node, 'max')
            self.max = ival_
            # validate type DomainId
            self.validate_DomainId(self.max)
# end class DomainIdRange


class TopicAccessRules(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, topic_rule=None):
        self.original_tagname_ = None
        if topic_rule is None:
            self.topic_rule = []
        else:
            self.topic_rule = topic_rule
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TopicAccessRules)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TopicAccessRules.subclass:
            return TopicAccessRules.subclass(*args_, **kwargs_)
        else:
            return TopicAccessRules(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_topic_rule(self): return self.topic_rule
    def set_topic_rule(self, topic_rule): self.topic_rule = topic_rule
    def add_topic_rule(self, value): self.topic_rule.append(value)
    def insert_topic_rule_at(self, index, value): self.topic_rule.insert(index, value)
    def replace_topic_rule_at(self, index, value): self.topic_rule[index] = value
    def hasContent_(self):
        if (
            self.topic_rule
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TopicAccessRules', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TopicAccessRules')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TopicAccessRules')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TopicAccessRules', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TopicAccessRules'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TopicAccessRules', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for topic_rule_ in self.topic_rule:
            topic_rule_.export(outfile, level, namespace_, name_='topic_rule', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'topic_rule':
            obj_ = TopicRule.factory()
            obj_.build(child_)
            self.topic_rule.append(obj_)
            obj_.original_tagname_ = 'topic_rule'
# end class TopicAccessRules


class TopicRule(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, topic_expression=None, enable_discovery_protection=None, enable_liveliness_protection=None, enable_read_access_control=None, enable_write_access_control=None, metadata_protection_kind=None, data_protection_kind=None):
        self.original_tagname_ = None
        self.topic_expression = topic_expression
        self.validate_TopicExpression(self.topic_expression)
        self.enable_discovery_protection = enable_discovery_protection
        self.enable_liveliness_protection = enable_liveliness_protection
        self.enable_read_access_control = enable_read_access_control
        self.enable_write_access_control = enable_write_access_control
        self.metadata_protection_kind = metadata_protection_kind
        self.validate_ProtectionKind(self.metadata_protection_kind)
        self.data_protection_kind = data_protection_kind
        self.validate_ProtectionKind(self.data_protection_kind)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TopicRule)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TopicRule.subclass:
            return TopicRule.subclass(*args_, **kwargs_)
        else:
            return TopicRule(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_topic_expression(self): return self.topic_expression
    def set_topic_expression(self, topic_expression): self.topic_expression = topic_expression
    def get_enable_discovery_protection(self): return self.enable_discovery_protection
    def set_enable_discovery_protection(self, enable_discovery_protection): self.enable_discovery_protection = enable_discovery_protection
    def get_enable_liveliness_protection(self): return self.enable_liveliness_protection
    def set_enable_liveliness_protection(self, enable_liveliness_protection): self.enable_liveliness_protection = enable_liveliness_protection
    def get_enable_read_access_control(self): return self.enable_read_access_control
    def set_enable_read_access_control(self, enable_read_access_control): self.enable_read_access_control = enable_read_access_control
    def get_enable_write_access_control(self): return self.enable_write_access_control
    def set_enable_write_access_control(self, enable_write_access_control): self.enable_write_access_control = enable_write_access_control
    def get_metadata_protection_kind(self): return self.metadata_protection_kind
    def set_metadata_protection_kind(self, metadata_protection_kind): self.metadata_protection_kind = metadata_protection_kind
    def get_data_protection_kind(self): return self.data_protection_kind
    def set_data_protection_kind(self, data_protection_kind): self.data_protection_kind = data_protection_kind
    def validate_TopicExpression(self, value):
        # Validate type TopicExpression, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            pass
    def validate_ProtectionKind(self, value):
        # Validate type ProtectionKind, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ENCRYPT', 'SIGN', 'NONE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on ProtectionKind' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.topic_expression is not None or
            self.enable_discovery_protection is not None or
            self.enable_liveliness_protection is not None or
            self.enable_read_access_control is not None or
            self.enable_write_access_control is not None or
            self.metadata_protection_kind is not None or
            self.data_protection_kind is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TopicRule', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TopicRule')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TopicRule')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TopicRule', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TopicRule'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='TopicRule', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.topic_expression is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%stopic_expression>%s</%stopic_expression>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.topic_expression), input_name='topic_expression')), namespace_, eol_))
        if self.enable_discovery_protection is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%senable_discovery_protection>%s</%senable_discovery_protection>%s' % (namespace_, self.gds_format_boolean(self.enable_discovery_protection, input_name='enable_discovery_protection'), namespace_, eol_))
        if self.enable_liveliness_protection is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%senable_liveliness_protection>%s</%senable_liveliness_protection>%s' % (namespace_, self.gds_format_boolean(self.enable_liveliness_protection, input_name='enable_liveliness_protection'), namespace_, eol_))
        if self.enable_read_access_control is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%senable_read_access_control>%s</%senable_read_access_control>%s' % (namespace_, self.gds_format_boolean(self.enable_read_access_control, input_name='enable_read_access_control'), namespace_, eol_))
        if self.enable_write_access_control is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%senable_write_access_control>%s</%senable_write_access_control>%s' % (namespace_, self.gds_format_boolean(self.enable_write_access_control, input_name='enable_write_access_control'), namespace_, eol_))
        if self.metadata_protection_kind is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%smetadata_protection_kind>%s</%smetadata_protection_kind>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.metadata_protection_kind), input_name='metadata_protection_kind')), namespace_, eol_))
        if self.data_protection_kind is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sdata_protection_kind>%s</%sdata_protection_kind>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.data_protection_kind), input_name='data_protection_kind')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'topic_expression':
            topic_expression_ = child_.text
            topic_expression_ = self.gds_validate_string(topic_expression_, node, 'topic_expression')
            self.topic_expression = topic_expression_
            # validate type TopicExpression
            self.validate_TopicExpression(self.topic_expression)
        elif nodeName_ == 'enable_discovery_protection':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'enable_discovery_protection')
            self.enable_discovery_protection = ival_
        elif nodeName_ == 'enable_liveliness_protection':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'enable_liveliness_protection')
            self.enable_liveliness_protection = ival_
        elif nodeName_ == 'enable_read_access_control':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'enable_read_access_control')
            self.enable_read_access_control = ival_
        elif nodeName_ == 'enable_write_access_control':
            sval_ = child_.text
            if sval_ in ('true', '1'):
                ival_ = True
            elif sval_ in ('false', '0'):
                ival_ = False
            else:
                raise_parse_error(child_, 'requires boolean')
            ival_ = self.gds_validate_boolean(ival_, node, 'enable_write_access_control')
            self.enable_write_access_control = ival_
        elif nodeName_ == 'metadata_protection_kind':
            metadata_protection_kind_ = child_.text
            metadata_protection_kind_ = self.gds_validate_string(metadata_protection_kind_, node, 'metadata_protection_kind')
            self.metadata_protection_kind = metadata_protection_kind_
            # validate type ProtectionKind
            self.validate_ProtectionKind(self.metadata_protection_kind)
        elif nodeName_ == 'data_protection_kind':
            data_protection_kind_ = child_.text
            data_protection_kind_ = self.gds_validate_string(data_protection_kind_, node, 'data_protection_kind')
            self.data_protection_kind = data_protection_kind_
            # validate type ProtectionKind
            self.validate_ProtectionKind(self.data_protection_kind)
# end class TopicRule


GDSClassesMapping = {
    'dds': DomainAccessRulesNode,
    'domain_access_rules': DomainAccessRules,
    'domain_rule': DomainRule,
    'domains': DomainIdSet,
    'id_range': DomainIdRange,
    'topic_access_rules': TopicAccessRules,
    'topic_rule': TopicRule,
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DomainAccessRulesNode'
        rootClass = DomainAccessRulesNode
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DomainAccessRulesNode'
        rootClass = DomainAccessRulesNode
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DomainAccessRulesNode'
        rootClass = DomainAccessRulesNode
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'DomainAccessRulesNode'
        rootClass = DomainAccessRulesNode
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from governance import *\n\n')
        sys.stdout.write('import governance as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "DomainAccessRules",
    "DomainAccessRulesNode",
    "DomainIdRange",
    "DomainIdSet",
    "DomainRule",
    "TopicAccessRules",
    "TopicRule"
]
